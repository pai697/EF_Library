// <auto-generated />
using System;
using EF_Library.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFLibrary.Migrations
{
    [DbContext(typeof(LibraryContext))]
    partial class LibraryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EF_Library.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("MiddleName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Surname")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id")
                        .HasName("PK_Author");

                    b.ToTable("Author", (string)null);
                });

            modelBuilder.Entity("EF_Library.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateTaken")
                        .HasColumnType("date");

                    b.Property<string>("Genre")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("Location")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id")
                        .HasName("PK_Book");

                    b.HasIndex("AuthorId");

                    b.HasIndex("Location");

                    b.ToTable("Book", (string)null);
                });

            modelBuilder.Entity("EF_Library.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<int?>("Room")
                        .HasColumnType("int");

                    b.Property<int?>("Shelf")
                        .HasColumnType("int");

                    b.HasKey("LocationId")
                        .HasName("PK_Location");

                    b.ToTable("Location", (string)null);
                });

            modelBuilder.Entity("EF_Library.Models.Reader", b =>
                {
                    b.Property<int>("ReaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReaderId"));

                    b.Property<string>("Email")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Number")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Surname")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("ReaderId")
                        .HasName("PK_Reader");

                    b.ToTable("Reader", (string)null);
                });

            modelBuilder.Entity("EF_Library.Models.ReadingRoom", b =>
                {
                    b.Property<int>("ReadingRoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReadingRoomId"));

                    b.Property<int?>("Room")
                        .HasColumnType("int");

                    b.Property<int?>("WorkerId")
                        .HasColumnType("int");

                    b.HasKey("ReadingRoomId")
                        .HasName("PK_Reading");

                    b.HasIndex("WorkerId");

                    b.ToTable("ReadingRoom", (string)null);
                });

            modelBuilder.Entity("EF_Library.Models.RentedBook", b =>
                {
                    b.Property<int>("ReaderId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BeginDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int?>("WorkerId")
                        .HasColumnType("int");

                    b.HasKey("ReaderId", "BookId")
                        .HasName("PK_RentedBook");

                    b.HasIndex("BookId");

                    b.HasIndex("WorkerId");

                    b.ToTable("RentedBook", (string)null);
                });

            modelBuilder.Entity("EF_Library.Models.Worker", b =>
                {
                    b.Property<int>("WorkerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkerId"));

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Position")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Surname")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("WorkerId")
                        .HasName("PK_Worker");

                    b.ToTable("Worker", (string)null);
                });

            modelBuilder.Entity("EF_Library.Models.Book", b =>
                {
                    b.HasOne("EF_Library.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("FK_Book_AuthorId");

                    b.HasOne("EF_Library.Models.Location", "LocationNavigation")
                        .WithMany("Books")
                        .HasForeignKey("Location")
                        .HasConstraintName("FK_Book_Location");

                    b.Navigation("Author");

                    b.Navigation("LocationNavigation");
                });

            modelBuilder.Entity("EF_Library.Models.ReadingRoom", b =>
                {
                    b.HasOne("EF_Library.Models.Worker", "Worker")
                        .WithMany("ReadingRooms")
                        .HasForeignKey("WorkerId")
                        .HasConstraintName("FK_ReadingRoom_Worker");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("EF_Library.Models.RentedBook", b =>
                {
                    b.HasOne("EF_Library.Models.Book", "Book")
                        .WithMany("RentedBooks")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK_RentedBook_Book");

                    b.HasOne("EF_Library.Models.Reader", "Reader")
                        .WithMany("RentedBooks")
                        .HasForeignKey("ReaderId")
                        .IsRequired()
                        .HasConstraintName("FK_RentedBook_Reader");

                    b.HasOne("EF_Library.Models.Worker", "Worker")
                        .WithMany("RentedBooks")
                        .HasForeignKey("WorkerId")
                        .HasConstraintName("FK_RentedBook_Worker");

                    b.Navigation("Book");

                    b.Navigation("Reader");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("EF_Library.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("EF_Library.Models.Book", b =>
                {
                    b.Navigation("RentedBooks");
                });

            modelBuilder.Entity("EF_Library.Models.Location", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("EF_Library.Models.Reader", b =>
                {
                    b.Navigation("RentedBooks");
                });

            modelBuilder.Entity("EF_Library.Models.Worker", b =>
                {
                    b.Navigation("ReadingRooms");

                    b.Navigation("RentedBooks");
                });
#pragma warning restore 612, 618
        }
    }
}
